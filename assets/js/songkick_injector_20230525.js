!function(){"use strict";var e,t,n,o,r,i;(i=e||(e={})).Call="call",i.Reply="reply",i.Syn="syn",i.SynAck="synAck",i.Ack="ack",function(e){e.Fulfilled="fulfilled",e.Rejected="rejected"}(t||(t={})),function(e){e.ConnectionDestroyed="ConnectionDestroyed",e.ConnectionTimeout="ConnectionTimeout",e.NoIframeSrc="NoIframeSrc"}(n||(n={})),function(e){e.DataCloneError="DataCloneError"}(o||(o={})),(r||(r={})).Message="message";const a={"http:":"80","https:":"443"},s=/^(https?:)?\/\/([^/:]+)?(:(\d+))?/,c=["file:","data:"],d=({name:e,message:t,stack:n})=>({name:e,message:t,stack:n});let l=0;var u=()=>++l;const g=e=>e?e.split("."):[],m=(e,t,n)=>{const o=g(t);return o.reduce(((e,t,r)=>(void 0===e[t]&&(e[t]={}),r===o.length-1&&(e[t]=n),e[t])),e),e},p=(e,t)=>{const n={};return Object.keys(e).forEach((o=>{const r=e[o],i=((e,t)=>{const n=g(t||"");return n.push(e),(e=>e.join("."))(n)})(o,t);"object"==typeof r&&Object.assign(n,p(r,i)),"function"==typeof r&&(n[i]=r)})),n};var h=(o,i,a,s,c)=>{const{localName:d,local:l,remote:g,originForSending:p,originForReceiving:h}=i;let f=!1;c(`${d}: Connecting call sender`);const v=a.reduce(((o,i)=>{return o[i]=(a=i,(...o)=>{let i;c(`${d}: Sending ${a}() call`);try{g.closed&&(i=!0)}catch(e){i=!0}if(i&&s(),f){const e=new Error(`Unable to send ${a}() call due to destroyed connection`);throw e.code=n.ConnectionDestroyed,e}return new Promise(((n,i)=>{const s=u(),m=o=>{if(o.source!==g||o.data.penpal!==e.Reply||o.data.id!==s)return;if("*"!==h&&o.origin!==h)return void c(`${d} received message from origin ${o.origin} which did not match expected origin ${h}`);const u=o.data;c(`${d}: Received ${a}() reply`),l.removeEventListener(r.Message,m);let p=u.returnValue;u.returnValueIsError&&(p=(e=>{const t=new Error;return Object.keys(e).forEach((n=>t[n]=e[n])),t})(p)),(u.resolution===t.Fulfilled?n:i)(p)};l.addEventListener(r.Message,m);const f={penpal:e.Call,id:s,methodName:a,args:o};g.postMessage(f,p)}))}),o;var a}),{});return Object.assign(o,(e=>{const t={};for(const n in e)m(t,n,e[n]);return t})(v)),()=>{f=!0}},f=i=>{let{iframe:l,methods:u={},childOrigin:g,timeout:m,debug:f=!1}=i;const v=(e=>(...t)=>{e&&console.log("[Penpal]",...t)})(f),y=((e,t)=>{const n=[];let o=!1;return{destroy(e){o||(o=!0,t("Parent: Destroying connection"),n.forEach((t=>{t(e)})))},onDestroy(e){o?e():n.push(e)}}})(0,v),{onDestroy:w,destroy:E}=y;g||((e=>{if(!e.src&&!e.srcdoc){const e=new Error("Iframe must have src or srcdoc property defined.");throw e.code=n.NoIframeSrc,e}})(l),g=(e=>{if(e&&c.find((t=>e.startsWith(t))))return"null";const t=document.location,n=s.exec(e);let o,r,i;return n?(o=n[1]?n[1]:t.protocol,r=n[2],i=n[4]):(o=t.protocol,r=t.hostname,i=t.port),`${o}//${r}${i&&i!==a[o]?`:${i}`:""}`})(l.src));const k="null"===g?"*":g,b=p(u),S=((t,n,o,r)=>i=>{if(!i.source)return;if("*"!==o&&i.origin!==o)return void t(`Parent: Handshake - Received SYN message from origin ${i.origin} which did not match expected origin ${o}`);t("Parent: Handshake - Received SYN, responding with SYN-ACK");const a={penpal:e.SynAck,methodNames:Object.keys(n)};i.source.postMessage(a,r)})(v,b,g,k),$=((n,i,a,s,c)=>{const{destroy:l,onDestroy:u}=s;let g,m;const p={};return s=>{if("*"!==i&&s.origin!==i)return void c(`Parent: Handshake - Received ACK message from origin ${s.origin} which did not match expected origin ${i}`);c("Parent: Handshake - Received ACK");const f={localName:"Parent",local:window,remote:s.source,originForSending:a,originForReceiving:i};g&&g(),g=((n,i,a)=>{const{localName:s,local:c,remote:l,originForSending:u,originForReceiving:g}=n;let m=!1;const p=n=>{if(n.source!==l||n.data.penpal!==e.Call)return;if("*"!==g&&n.origin!==g)return void a(`${s} received message from origin ${n.origin} which did not match expected origin ${g}`);const r=n.data,{methodName:c,args:p,id:h}=r;a(`${s}: Received ${c}() call`);const f=n=>r=>{if(a(`${s}: Sending ${c}() reply`),m)return void a(`${s}: Unable to send ${c}() reply due to destroyed connection`);const i={penpal:e.Reply,id:h,resolution:n,returnValue:r};n===t.Rejected&&r instanceof Error&&(i.returnValue=d(r),i.returnValueIsError=!0);try{l.postMessage(i,u)}catch(n){if(n.name===o.DataCloneError){const o={penpal:e.Reply,id:h,resolution:t.Rejected,returnValue:d(n),returnValueIsError:!0};l.postMessage(o,u)}throw n}};new Promise((e=>e(i[c].apply(i,p)))).then(f(t.Fulfilled),f(t.Rejected))};return c.addEventListener(r.Message,p),()=>{m=!0,c.removeEventListener(r.Message,p)}})(f,n,c),u(g),m&&m.forEach((e=>{delete p[e]})),m=s.data.methodNames;const v=h(p,f,m,l,c);return u(v),p}})(b,g,k,y,v),C=new Promise(((t,o)=>{const i=((e,t)=>{let o;return void 0!==e&&(o=window.setTimeout((()=>{const o=new Error(`Connection timed out after ${e}ms`);o.code=n.ConnectionTimeout,t(o)}),e)),()=>{clearTimeout(o)}})(m,E),a=n=>{if(n.source===l.contentWindow&&n.data)if(n.data.penpal!==e.Syn)if(n.data.penpal!==e.Ack);else{const e=$(n);e&&(i(),t(e))}else S(n)};window.addEventListener(r.Message,a),v("Parent: Awaiting handshake"),((e,t)=>{const{destroy:n,onDestroy:o}=t,r=setInterval((()=>{e.isConnected||(clearInterval(r),n())}),6e4);o((()=>{clearInterval(r)}))})(l,y),w((e=>{window.removeEventListener(r.Message,a),e&&o(e)}))}));return{promise:C,destroy(){E()}}},v=(e,t)=>{return n=void 0,o=void 0,i=function*(){const n={setIframeHeight:e=>{const n=document.getElementById(t);n&&(n.style.height=`${e.toString()}px`)}},o=f({iframe:e,methods:Object.assign({},n)});try{const e=yield o.promise;(null==e?void 0:e.setReferrer)&&e.setReferrer(window.location.origin)}catch(e){console.log("Error on connection",e)}},new((r=void 0)||(r=Promise))((function(e,t){function a(e){try{c(i.next(e))}catch(e){t(e)}}function s(e){try{c(i.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(a,s)}c((i=i.apply(n,o||[])).next())}));var n,o,r,i};const y=(e,t,n)=>{let o="";return e?(["background-color","font-color","font-family","font-size","font-weight","locale","other-artists","theme","text-shadow","text-transform","track-button","share-button","country-filter","rsvp","request-show","remind-me","past-events","past-events-offtour"].forEach((r=>{let i=e.getAttribute("data-"+r);if(!i&&t&&n){const e="font-color"===r?"color":r;i=n.getPropertyValue(e)}i&&(o+="&"+r+"="+encodeURIComponent(i))})),o):o},w="www.songkick.com",E="skweb-iap.staging.soundbadger.net",k="dev.skweb-iap.staging.soundbadger.net",b=e=>{var t,n,o,r;const i=new RegExp("^https?://("+[w,E,k].join("|")+")/(artists|users|venues)/([0-9a-zA-Z-+._]+|[0-9]+)$").exec(e);if(i){let e,a,s="";switch(i[1]){case w:s="widget-app.songkick.com";break;case E:s="widget-app.staging.songkick.net";break;case k:s="localhost:3000"}switch(i[2]){case"venues":e="venue",a=null===(n=null===(t=i[3])||void 0===t?void 0:t.match(/^\d+/))||void 0===n?void 0:n[0];break;case"users":e="username",a=i[3];break;case"artists":e="artist",a=null===(r=null===(o=i[3])||void 0===o?void 0:o.match(/^\d+/))||void 0===r?void 0:r[0]}return{targetDomain:s,stagingEnv:!!s.match(/staging\.songkick\.net/),devEnv:!!s.match(/localhost\:3000/),resourceType:e,resourceId:a}}return null},S=()=>{if(window.isLoadingSKIFrame)return null;window.isLoadingSKIFrame=!0;const e=document.querySelectorAll("a.songkick-widget");return null===e?(console.error("no a tag detected"),null):(e.forEach((e=>{const{parentStyle:t,detectStyleEnabled:n}=(e=>{let t=null;const n="true"===e.getAttribute("data-detect-style");return n&&e.parentNode&&(t=window.getComputedStyle(e.parentNode)),{parentStyle:t,detectStyleEnabled:n}})(e);(({sourceTag:e,parentStyle:t,detectStyleEnabled:n})=>{var o;const r=document.createElement("iframe"),i=null!==(o=(({sourceTag:e,parentStyle:t,detectStyleEnabled:n})=>{var o;if(!e)return;const r=b(e.href);if(!r)return;let i=e.style.width;i||(i="100%");let a=e.textContent||e.innerText;a||(a="");const s=r.resourceType,c=null!==(o=r.resourceId)&&void 0!==o?o:"";let d=[r.devEnv?"http:":"https:","//",r.targetDomain,"/?",s,"=",encodeURIComponent(c),"&header=",encodeURIComponent(a),y(e,n,t)].join("");return r.stagingEnv?d+="&staging=true":r.devEnv&&(d+="&staging=true",d=d.replace(/3000/,"8080")),d})({sourceTag:e,parentStyle:t,detectStyleEnabled:n}))&&void 0!==o?o:"",a=(e=>{var t;return`songkick-widget-${(null===(t=b(e))||void 0===t?void 0:t.resourceId)||""}-${Math.floor(1e4*Math.random()+1)}`})(e.href);r.setAttribute("id",a),r.style.height="400px",r.style.width="100%",r.setAttribute("border","none"),r.setAttribute("frameBorder","0"),r.setAttribute("allow","clipboard-write"),r.src=i,(null==e?void 0:e.parentNode)&&(e.parentNode.replaceChild(r,e),v(r,a))})({sourceTag:e,parentStyle:t,detectStyleEnabled:n})})),$())},$=()=>{window.isLoadingSKIFrame=!1};"complete"===document.readyState&&S(),document.onreadystatechange=()=>{"complete"===document.readyState&&S()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,